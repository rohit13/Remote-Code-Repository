#pragma once
#include "../HttpMessage/HttpMessage.h"
#include "../Sockets/Sockets.h"
#include "../FileSystem/FileSystem.h"
#include "../Logger/Logger.h"
#include "../Utilities/Utilities.h"
#include "../Receiver/ClientHandler.h"
#include <string>
#include <iostream>
#include <thread>


/////////////////////////////////////////////////////////////////////
// ClientCounter creates a sequential number for each client
//
class ClientCounter
{
public:
	ClientCounter() { ++clientCount; }
	size_t count() { return clientCount; }
private:
	static size_t clientCount;
};

size_t ClientCounter::clientCount = 0;

class Sender {

	using EndPoint = std::string;
public:
	HttpMessage Sender::makeMessage(size_t n, const std::string& body, EndPoint ep, std::string fromAdd)
	{
		HttpMessage msg;
		HttpMessage::Attribute attrib;
		EndPoint myEndPoint = fromAdd;  // ToDo: make this a member of the sender
												 // given to its constructor.
		switch (n)
		{
		case 1:
			msg.clear();
			msg.addAttribute(HttpMessage::attribute("POST", "Message"));
			msg.addAttribute(HttpMessage::Attribute("mode", "oneway"));
			msg.addAttribute(HttpMessage::parseAttribute("toAddr:" + ep));
			msg.addAttribute(HttpMessage::parseAttribute("fromAddr:" + myEndPoint));

			msg.addBody(body);
			if (body.size() > 0)
			{
				attrib = HttpMessage::attribute("content-length", Converter<size_t>::toString(body.size()));
				msg.addAttribute(attrib);
			}
			break;
		default:
			msg.clear();
			msg.addAttribute(HttpMessage::attribute("Error", "unknown message type"));
		}
		return msg;
	}
	//----< send message using socket >----------------------------------

	void Sender::sendMessage(HttpMessage& msg, Socket& socket)
	{
		std::string msgString = msg.toString();
		socket.send(msgString.size(), (Socket::byte*)msgString.c_str());
	}
	//----< send file using socket >-------------------------------------
	/*
	* - Sends a message to tell receiver a file is coming.
	* - Then sends a stream of bytes until the entire file
	*   has been sent.
	* - Sends in binary mode which works for either text or binary.
	*/
	bool Sender::sendFile(const std::string& filename, Socket& socket, const size_t toPort, std::string fromAdd)
	{
		// assumes that socket is connected

		std::string fqname = "../TestFiles/" + filename;
		FileSystem::FileInfo fi(fqname);
		size_t fileSize = fi.size();
		std::string sizeString = Converter<size_t>::toString(fileSize);
		FileSystem::File file(fqname);
		file.open(FileSystem::File::in, FileSystem::File::binary);
		if (!file.isGood())
			return false;
		//EndPoint ep = "localhost::" + std::to_string(toPort);
		HttpMessage msg = makeMessage(1, "", "localhost::" + std::to_string(toPort), fromAdd);
		msg.addAttribute(HttpMessage::Attribute("file", filename));
		msg.addAttribute(HttpMessage::Attribute("content-length", sizeString));
		sendMessage(msg, socket);
		const size_t BlockSize = 2048;
		Socket::byte buffer[BlockSize];
		while (true)
		{
			FileSystem::Block blk = file.getBlock(BlockSize);
			if (blk.size() == 0)
				break;
			for (size_t i = 0; i < blk.size(); ++i)
				buffer[i] = blk[i];
			socket.send(blk.size(), buffer);
			if (!file.isGood())
				break;
		}
		file.close();
		return true;
	}
	//----< this defines the behavior of the client >--------------------

	void Sender::execute(const size_t TimeBetweenMessages, const size_t NumMessages, const std::string component, const size_t toPort, std::string fromAdd)
	{
		// send NumMessages messages

		ClientCounter counter;
		size_t myCount = counter.count();
		std::string myCountString = Utilities::Converter<size_t>::toString(myCount);

		Show::attach(&std::cout);
		Show::start();

		Show::title(
			"Starting HttpMessage "+ component +" SENDER: " + myCountString +
			" on thread " + Utilities::Converter<std::thread::id>::toString(std::this_thread::get_id())
			);
		try
		{
			SocketSystem ss;
			SocketConnecter si;
			while (!si.connect("localhost", toPort))
			{
				Show::write("\n SERVER SENDER waiting to connect");
				::Sleep(100);
			}

			// send a set of messages

			HttpMessage msg;

			for (size_t i = 0; i < NumMessages; ++i)
			{
				std::string msgBody =
					"<msg>Message #" + Converter<size_t>::toString(i + 1) +
					" from " + component +" SENDER #" + myCountString + "</msg>";
				//EndPoint ep = "localhost::" + std::to_string(toPort);
				msg = makeMessage(1, msgBody, "localhost::" + std::to_string(toPort), fromAdd);
				/*
				* Sender class will need to accept messages from an input queue
				* and examine the toAddr attribute to see if a new connection
				* is needed.  If so, it would either close the existing connection
				* or save it in a map[url] = socket, then open a new connection.
				*/
				sendMessage(msg, si);
				Show::write("\n\n  " + component + " SENDER" + myCountString + " sent\n" + msg.toIndentedString());
				::Sleep(TimeBetweenMessages);
			}
			//  send all *.cpp files from TestFiles folder

			std::vector<std::string> files = FileSystem::Directory::getFiles("../TestFiles", "*.cpp");
			for (size_t i = 0; i < files.size(); ++i)
			{
				Show::write("\n\n  sending file " + files[i]);
				sendFile(files[i], si, toPort, fromAdd);
			}

			// shut down server's client handler
			//EndPoint ep1 = "toAddr:localhost:" + std::to_string(toPort);
			msg = makeMessage(1, "quit", "toAddr:localhost:" + std::to_string(toPort), fromAdd);
			sendMessage(msg, si);
			Show::write("\n\n  SERVER SENDER" + myCountString + " sent\n" + msg.toIndentedString());

			Show::write("\n");
			Show::write("\n  All done folks");
		}
		catch (std::exception& exc)
		{
			Show::write("\n  Exeception caught: ");
			std::string exMsg = "\n  " + std::string(exc.what()) + "\n\n";
			Show::write(exMsg);
		}
	}
};